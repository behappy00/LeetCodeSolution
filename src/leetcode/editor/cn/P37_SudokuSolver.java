/**
 * <p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>
 *
 * <p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p>
 *
 * <ol>
 * <li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li>
 * <li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li>
 * <li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>
 * </ol>
 *
 * <p>The <code>&#39;.&#39;</code> character indicates empty cells.</p>
 *
 * <p>&nbsp;</p>
 * <p><strong>Example 1:</strong></p>
 * <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" style="height:250px; width:250px" />
 * <pre>
 * <strong>Input:</strong> board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]
 * <strong>Output:</strong> [[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]
 * <strong>Explanation:</strong>&nbsp;The input board is shown above and the only valid solution is shown below:
 *
 * <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" style="height:250px; width:250px" />
 * </pre>
 *
 * <p>&nbsp;</p>
 * <p><strong>Constraints:</strong></p>
 *
 * <ul>
 * <li><code>board.length == 9</code></li>
 * <li><code>board[i].length == 9</code></li>
 * <li><code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>.</li>
 * <li>It is <strong>guaranteed</strong> that the input board has only one solution.</li>
 * </ul>
 * <div><div>Related Topics</div><div><li>Êï∞ÁªÑ</li><li>ÂõûÊ∫Ø</li><li>Áü©Èòµ</li></div></div><br><div><li>üëç 1317</li><li>üëé 0</li></div>
 */

package leetcode.editor.cn;

import java.util.ArrayList;
import java.util.List;

/**
 * Sudoku Solver
 * @author WBJ
 * @date 2022-07-12 21:07:25
 */
public class P37_SudokuSolver {
    public static void main(String[] args) {
        //ÊµãËØï‰ª£Á†Å
        Solution solution = new P37_SudokuSolver().new Solution();
    }

    //ÂäõÊâ£‰ª£Á†Å
//leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        //ÂÇ®Â≠òÊØè‰∏ÄË°åÂ≠òÂú®ÁöÑÊï∞Â≠ó
        private int[] line = new int[9];
        //ÂÇ®Â≠ò ÊØè‰∏ÄÂàóÂ≠òÂú®ÁöÑÊï∞Â≠ó
        private int[] column = new int[9];
        //ÂÇ®Â≠òÊØè‰∏Ä‰∏™ 3*3ÂÆ´Â≠òÂú®ÁöÑÊï∞Â≠ó
        private int[][] block = new int[3][3];
        //Ëøô‰∏™Â∏ÉÂ∞îÊï∞ÁªÑÁî®Êù•Âà§Êñ≠ÊòØÂê¶Â°´ÂÆåÊâÄÊúâÁ©∫Ê†º
        private boolean valid = false;
        //Ëøô‰∏™listÁî®Êù•ËÆ∞ÂΩïÊâÄÊúâÁ©∫Ê†ºÁöÑ‰ΩçÁΩÆÔºåÊï¥Êï∞Êï∞ÁªÑÁ¨¨‰∏Ä‰∏™‰ΩçÁΩÆ‰∏∫Ë°åÁöÑ‰ΩçÁΩÆ ÔºåÁ¨¨‰∫å‰∏™‰ΩçÁΩÆ‰∏∫ÂàóÁöÑ‰ΩçÁΩÆ
        private List<int[]> spaces = new ArrayList<int[]>();

        public void solveSudoku(char[][] board) {
            //ÈÅçÂéÜÊâÄÊúâ‰ΩçÁΩÆ
            for (int i = 0; i < 9; ++i) {
                for (int j = 0; j < 9; ++j) {
                    //Â¶ÇÊûú‰ΩçÁΩÆ‰∏∫Á©∫ÔºåÊàë‰ª¨ÊääËØ•‰ΩçÁΩÆÂä†ÂÖ•spaces‰∏≠
                    if (board[i][j] == '.') {
                        spaces.add(new int[]{i, j});
                    } else {
                        //‰∏ç‰∏∫Á©∫ÂàôÊääËØ•Êï∞Â≠óÂàÜÂà´Á∫≥ÂÖ•ÂØπÂ∫îÁöÑË°åÔºåÂàóÔºå3*3ÂÆ´‰∏≠
                        int digit = board[i][j] - '0' - 1;
                        flip(i, j, digit);
                    }
                }
            }
            //ÂºÄÂßãÊêúÁ¥¢
            dfs(board, 0);
        }

        public void dfs(char[][] board, int pos) {
            //Â¶ÇÊûúspacesË¢´ÈÅçÂéÜÂÆå‰∫ÜÔºåËØ¥ÊòéÊàë‰ª¨Â°´ÂÆå‰∫ÜÁ©∫Ê†ºÔºåÂ∞ÜvalidÊîπ‰∏∫trueÔºåÈÄöËøáreturnÁªìÊùüËøô‰∏™ÂáΩÊï∞
            if (pos == spaces.size()) {
                valid = true;
                return;
            }
            //Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™Á©∫Ê†ºÁöÑ‰ΩçÁΩÆ
            int[] space = spaces.get(pos);
            //iÔºåjÂàÜÂà´‰∏∫ËØ•Á©∫Ê†ºÁöÑË°åÊï∞ÂíåÂàóÊï∞
            int i = space[0], j = space[1];
            //|‰∏∫orÔºåÈÄöËøá3‰∏™ÊàñËøêÁÆóÊàë‰ª¨ÂèØ‰ª•ÂæóÂà∞‰∏Ä‰∏™9‰ΩçÁöÑ‰∫åËøõÂà∂Êï∞Â≠óÔºå‰ªéÂè≥Âà∞Â∑¶ÂàÜÂà´‰ª£Ë°®1-9Ëøô‰∏™9‰∏™Êï∞ÊòØÂê¶ÂèØ‰ª•Â°´ÂÖ•ËØ•Á©∫Ê†ºÔºåÈÄöËøá~ËøêÁÆóÔºàÂèñÂèçÔºâÔºåÊàë‰ª¨Áî®1Ë°®Á§∫ËØ•Êï∞Â≠óÊòØ‰∏Ä‰∏™ÂèØÂ°´ÂÖ•ÁöÑÈÄâÈ°πÔºå0x1ff‰∏∫ÂçÅÂÖ≠ËøõÂà∂ ÔºåÁ≠âÂêå‰∫é111111111Ôºâ
            int mask = ~(line[i] | column[j] | block[i / 3][j / 3]) & 0x1ff;
            //ÂΩìmask‰∏ç‰∏∫0Âπ∂‰∏î valid‰∏∫falseË°®Á§∫ËøòÊúâÊï∞ÂæÖÂ°´ÂÖ•ÔºåÁªßÁª≠Ëøô‰∏™Âæ™ÁéØÔºåmask &= (mask - 1)ÊääÊúÄ‰Ωé‰ΩçÁöÑ1Âèò‰∏∫0
            for (; mask != 0 && !valid; mask &= (mask - 1)) {
                //Ëøô‰∏™Êìç‰ΩúÂè™‰øùÁïôÊúÄ‰Ωé‰ΩçÁöÑ1
                int digitMask = mask & (-mask);
                //ÊúÄ‰Ωé‰ΩçÁöÑ1ÂêéÈù¢ÁöÑ‰ΩçÊï∞ÔºådigitMask-1Â∞ÜÂéüÊú¨1ÂêéÈù¢ÁöÑ0ÂÖ®ÈÉ®Âèò‰∏∫‰∫Ü1
                int digit = Integer.bitCount(digitMask - 1);
                //Êõ¥Êñ∞Ë°åÔºåÂàóÔºåÂÆ´
                flip(i, j, digit);
                //ÊääËØ•Êï∞Â°´ÂÖ•Êùø‰∏≠
                board[i][j] = (char) (digit + '0' + 1);
                //ÁªßÁª≠ÊêúÁ¥¢
                dfs(board, pos + 1);
                //Êí§ÂõûÊìç‰ΩúÔºàÂéüÁêÜÊòØflip‰∏≠ÁöÑ~ËøêÁÆóÔºå‰∏§‰∏™ 1Âàô‰∏∫0,0Ë°®Á§∫Ëøô‰∏™‰ΩçÁΩÆ‰ª£Ë°®ÁöÑ1-9‰∏≠ÁöÑÈÇ£‰∏™Êï∞ ‰∏çÂÜçÊòØ‰∏Ä‰∏™ÂèØË¢´Â°´ÂÖ•ÁöÑÈÄâÈ°πÔºâ
                flip(i, j, digit);
            }
        }

        public void flip(int i, int j, int digit) {
            //^‰ª£Ë°®ÂºÇÊàñÔºåÂè™Êúâ1‰∏™1ÁöÑÊó∂ÂÄôÊâç‰∏∫1„ÄÇÊØîÂ¶Ç0011^1001=1010
            //<<‰ª£Ë°®Â∑¶ÁßªÔºåÊØîÂ¶Ç 1<<2=4Ë¢´Âä†ÂÖ•Âà∞‰∏ãÈù¢ÁöÑ‰∏â‰∏™Êï∞ÁªÑ‰∏≠ÔºåÂú®‰∫åËøõÂà∂4‰∏∫100ÔºåÊÑèÂë≥ÁùÄ3Ëøô‰∏™Êï∞Â≠óË¢´Âç†Áî®‰∫Ü
            line[i] ^= (1 << digit);
            column[j] ^= (1 << digit);
            block[i / 3][j / 3] ^= (1 << digit);
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
