### 解题思路

不想管整型问题了，直接用了官方代码，自己写的放在最下面

### 代码

* java

```java
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> quadruplets = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 4) {
            return quadruplets;
        }
        Arrays.sort(nums);
        int length = nums.length;
        for (int i = 0; i < length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            if ((long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {
                break;
            }
            if ((long) nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {
                continue;
            }
            for (int j = i + 1; j < length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                if ((long) nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {
                    break;
                }
                if ((long) nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {
                    continue;
                }
                int left = j + 1, right = length - 1;
                while (left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == target) {
                        quadruplets.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
                        left++;
                        while (left < right && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        return quadruplets;
    }
}

```

* java

```java
   public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        int l = nums.length;
        for(int i = 0; i < l-3; i++){
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3] > target) break;
            if(nums[i]+nums[l-3]+nums[l-2]+nums[l-1] < target) continue;
            if(i>0 && nums[i-1] == nums[i]) continue;
            for(int j = i+1; j < l-2; j ++){
                if(nums[i]+nums[j]+nums[j+1]+nums[j+2] > target) break;
                if(nums[i]+nums[j]+nums[l-2]+nums[l-1] < target) continue;
                if(j>i+1 && nums[j-1] == nums[j]) continue;
                int m = j+1, n = l-1;
                while(m<n){
                    int sum = nums[i]+nums[j]+nums[m]+nums[n];
                    if(sum == target){
                        List<Integer> list = new ArrayList<Integer>();
                        list.add(nums[i]);
                        list.add(nums[j]);
                        list.add(nums[m]);
                        list.add(nums[n]);
                        ans.add(list);
                        n--;
                        m++;
                        while(m < l && nums[m-1] == nums[m]) m++;
                        while(n > j && nums[n] == nums[n+1]) n--;
                    }else if(sum < target){
                        m++;
                        while(m<l &&nums[m-1] == nums[m]) m++;
                    }else {
                        n--;
                        while(n>j &&nums[n+1] == nums[n]) n--;
                    }
                }
            }
        }
        return ans;

    }
}
```

